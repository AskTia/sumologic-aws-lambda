var AWS = require("aws-sdk");
var cwl = new AWS.CloudWatchLogs({apiVersion: '2014-03-28'});

async function createSubscriptionFilter(lambdaLogGroupName, destinationArn, roleArn, errorHandler) {
    if (destinationArn.startsWith("arn:aws:lambda")){
        var params = {
            destinationArn: destinationArn,
            filterName: 'SumoLGLBDFilter',
            filterPattern: '',
            logGroupName: lambdaLogGroupName
        };
    } else {
        var params = {
            destinationArn: destinationArn,
            filterName: 'SumoLGLBDFilter',
            filterPattern: '',
            logGroupName: lambdaLogGroupName,
            roleArn: roleArn
        };
    }

    // handle case where subscription filter exists/case where loggroup generated by target lambda
   await cwl.putSubscriptionFilter(params, errorHandler);
}

function filterLogGroups(event, logGroupRegex) {
    logGroupRegex = new RegExp(logGroupRegex, "i");
    let logGroupName = event.detail.requestParameters.logGroupName;
    if (logGroupName.match(logGroupRegex) && event.detail.eventName === "CreateLogGroup") {
        return true;
    }
    let lg_tags = event.detail.requestParameters.tags;
    if (process.env.LOG_GROUP_TAGS && lg_tags) {
        console.log("tags in loggroup: ", lg_tags);
        var tags_array = process.env.LOG_GROUP_TAGS.split(",");
        let tag, key, value;
        for (let i = 0; i < tags_array.length; i++) {
          tag = tags_array[i].split("=");
          key = tag[0].trim();
          value = tag[1].trim();
          if (lg_tags[key] && lg_tags[key]==value) {
              return true;
          }
        }
    }
    return false;
}

async function subscribeExistingLogGroups(logGroups) {
    var logGroupName;
    var logGroupRegex = new RegExp(process.env.LOG_GROUP_PATTERN, "i");
    var destinationArn = process.env.DESTINATION_ARN;
    var roleArn = process.env.ROLE_ARN;
    for (var i = logGroups.length - 1; i >= 0; i--) {
        logGroupName = logGroups[i].logGroupName;
        if (logGroupName.match(logGroupRegex)) {
            await createSubscriptionFilter(logGroupName, destinationArn, roleArn, (function(inner_logGroupName) { return function (err, data) {
                if (err) {
                    console.log("Error in subscribing", inner_logGroupName, err);
                } else {
                    console.log("Successfully subscribed logGroup: ", inner_logGroupName);
                }
            };})(logGroupName));
        } else {
            console.log("Unmatched logGroup: ", logGroupName);
        }
    }
}

function processExistingLogGroups(token, context, errorHandler) {
    var params = {limit: 50};
    if (token) {
        params = {
          limit: 50,
          // logGroupNamePrefix: '',
          nextToken: token
        };
    }
    var p = new Promise(function(resolve, reject) {
        cwl.describeLogGroups(params, function(err, data) {
            if (err) {
                console.log("error in fetching logGroups", err, err.stack);
                reject(err);
            } else {
                console.log("fetched logGroups: " + data.logGroups.length + " nextToken: " + data.nextToken);
                subscribeExistingLogGroups(data.logGroups);
                resolve(data);
            }
        });
    });
    var cb = function (data) {
        if (data.nextToken) {// if next set of log groups exists, invoke next instance of lambda
            console.log("Log Groups remaining...Calling the lambda again with token " + data.nextToken);
            invoke_lambda(context, data.nextToken, errorHandler);
            console.log("Lambda invoke complete with token " + data.nextToken);
        } else {
            console.log("ALl Log Groups are subscribed to Destination Type " + process.env.DESTINATION_ARN);
            errorHandler(null, "Success");
        }
    };
    return p.then(cb).catch(function (err) {
        errorHandler(err, "Error in fetching logGroups");
    });
}

function invoke_lambda(context, token, errorHandler) {
    var lambda = new AWS.Lambda();
    var payload = {"existingLogs": "true", "token": token};
    lambda.invoke({
        InvocationType: 'Event',
        FunctionName: context.functionName,
        Payload: JSON.stringify(payload),
    }, errorHandler);
}

function processEvents(env, event, errorHandler) {

    var logGroupName = event.detail.requestParameters.logGroupName;
    if (filterLogGroups(event, env.LOG_GROUP_PATTERN)) {
        console.log("Subscribing: ", logGroupName, env.DESTINATION_ARN);
        createSubscriptionFilter(logGroupName, env.DESTINATION_ARN, env.ROLE_ARN, errorHandler);
    } else {
        console.log("Unmatched: ", logGroupName, env.DESTINATION_ARN);
    }

}

exports.handler = function (event, context, callback) {
    console.log("Invoking Log Group connector function");
    function errorHandler(err, msg) {
        if (err) {
            console.log(err, msg);
            callback(err);
        } else {
            callback(null, "Success");
        }
    }
    if (event.existingLogs  == "true") {
        processExistingLogGroups(event.token, context, errorHandler);
    } else {
        processEvents(process.env, event, errorHandler);
    }
};
